#!/usr/bin/env python3
"""Convert output generated by pyLMAT to a proper dir tree for lmat2cmplx."""

import argparse
import os
import errno
import subprocess

# pyLMAT release information
__version__ = '0.0.8_ratsvm'
_verdata = 'Mar 2018'
_devflag = True

# > MAIN

# Predefined internal constants
_INPUTDIR = 'unmap'
_OUTPUTDIR = 'virome/'

# Argument Parser Configuration
parser = argparse.ArgumentParser(
    description='From pyLMAT output to lmat[sc]2cmplx input',
    epilog='rawlmat2lmat -- JMMM -- ' + _verdata
)
parser.add_argument(
    '-V', '--version',
    action='version',
    version='rawlmat2lmat release ' + __version__ + ' - ' + _verdata
)
parser.add_argument(
    '-v', '--verbose',
    action='count',
    help='increase output verbosity (-v or -vv)'
)
parser.add_argument(
    '-i', '--inputdir',
    action='store',
    metavar='PATH',
    default=_INPUTDIR,
    help=('relative path of the LMAT processed directories (if omitted, \'' +
          _INPUTDIR + '\' will be tried)')
)
parser.add_argument(
    '-o', '--outputdir',
    action='store',
    metavar='PATH',
    default=_OUTPUTDIR,
    help=('relative path of the output directory (if omitted, \'' +
          _OUTPUTDIR + '\' will be tried)')
)
# Parse arguments
args = parser.parse_args()
idir = args.inputdir
odir = args.outputdir
verb = (args.verbose if args.verbose is not None else 0)

# Program Header
print('\n=-= rawlmat2lmat =-= v' + __version__ + ' =-= ' +
      _verdata + ' =-= JMMM =-=')
if(_devflag):
    print('\n>>> WARNING! THIS IS JUST A DEVELOPMENT SUBRELEASE.'
          ' USE AT YOUR OWN RISK!\n')


(root, dirs, files) = next(os.walk(idir))
dirdone = 0
numdirs = len(dirs)
# Main loop: every subdir in idir
for d in dirs:
    dirsplit = d.split('_')
    dataset = 'HGVday'
    time = dirsplit[0].lstrip('day')
    replica = dirsplit[1]

    if replica != '1':
        dirdone += 1
        continue  # Just process the main temporal replica

    (root_, dirs_, files_) = next(os.walk(os.path.join(idir, d)))
    dirdone += 1
    # 2ndary loop: file in every subdir of idir
    if verb == 0:
        workdone = dirdone / numdirs
        print(("\rProgress: " +
               "[\033[92m{0:50s}\033[0m] " +
               "{1:.1f}%").format('#' * int(workdone * 50), workdone * 100),
              end="",
              flush=True)
    else:
        print('(', dirdone, 'of', numdirs,
              ') Looking for target files in: ', root_)
    for f in files_:
        if (('.fastsummary.' in f) or f.endswith('.genesummary') and
                ('.html' not in f) and ('.log' not in f) and
                ('_kmer_cov' not in f)):
            c = subprocess.call('cp ' + os.path.join(idir, d, f) + ' ' +
                                os.path.join(odir, dataset + '.' + time 
                                            + '.' + str(replica) + '.' + f),
                                shell=True)
            if not c and verb > 1:
                print('Dataset:', dataset, ' Time:', time,
                      ' Copied file:', f)
print('\n')
